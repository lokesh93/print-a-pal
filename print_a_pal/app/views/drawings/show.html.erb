<style>
			body { margin: 0; }
			canvas { width: 500px; height: 400px;  border-style: solid; border-radius: 20px; }
			#canvas{
				  
			}
			#title{
				text-align: left;
				font-family: helvetica;
				text-align: center;
			}
			#draw-mode{
				text-align: left;
				font-family: helvetica;
			}
			.draw-buttons{
				text-align: center;
			}
			.fa{
				margin: 0px 15px;
			}
			.draw-portion, .three-portion{
				width: 40%;
				display: inline-block;
				padding: 5%;
				margin-right: 20px;

			}
			.tooltip {
			    position: relative;
			    display: inline-block;
			    border-bottom: 1px dotted black;
			}

			.tooltip .tooltiptext {
			    visibility: hidden;
			    width: 120px;
			    background-color: black;
			    color: #fff;
			    text-align: center;
			    border-radius: 6px;
			    padding: 5px 0;

			    /* Position the tooltip */
			    position: absolute;
			    z-index: 1;
			}

			.tooltip:hover .tooltiptext {
			    visibility: visible;
			}
</style>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js" integrity="sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa" crossorigin="anonymous"></script>
<script src="https://use.fontawesome.com/d2a4a2be39.js"></script>
<script src="https://dl.dropboxusercontent.com/u/3587259/Code/Threejs/three.min.js"></script>
<script src="https://threejs.org/examples/js/controls/OrbitControls.js"></script>
<p id="notice"><%= notice %>

</p>
<div id="title"><h1>PRINT A PAL</h1></div>
<div class="draw-portion">
	
	<canvas id="canvas" width="500" height="400"></canvas>
		

</div>

<div class="three-portion">
	
		

</div>
<div class="draw-buttons">
	<i class="fa fa-minus fa-3x create-b-curve" aria-hidden="true"></i>
	<i class="fa fa-check fa-3x create-shape" aria-hidden="true"></i>
	<i class="fa fa-edit fa-3x manipulate-shape" aria-hidden="true"></i>
	<i class="fa fa-link fa-3x con-b-curve" aria-hidden="true"></i>
	<i class="fa fa-trash fa-3x clear-screen" aria-hidden="true"></i>
	<i class="fa fa-download  fa-3x download-stl" aria-hidden="true"></i>
	<i class="fa fa-floppy-o fa-3x save-curves" aria-hidden="true"></i>
	<i class="fa fa-arrow-down fa-3x depth-down" aria-hidden="true"></i>
	<i class="fa fa-arrow-up fa-3x depth-up" aria-hidden="true"></i>
	<i class="fa fa-tint fa-3x material" aria-hidden="true"></i>
</div>






<script>


var scene = new THREE.Scene();
var mesh; 
var camera = new THREE.PerspectiveCamera( 75, window.innerWidth/window.innerHeight, 0.1, 1000 );
var screen_width = window.innerWidth*0.4;
var screen_length = window.innerHeight*0.6; 
var wire_frame = true;
var depth = 60;

var renderer = new THREE.WebGLRenderer();
renderer.setSize( window.innerWidth*0.4, 400 );
console.log("inner width: "+ window.innerWidth);
console.log("inner height: "+ window.innerHeight);
document.body.children[9].appendChild( renderer.domElement );

var handle_selected = false;
var current_handle;
var bezier_index = 0;
var handles = new Array();
var b_curves = new Array();
var c = document.getElementById("canvas");
var ctx = c.getContext("2d");
var mousedown = false;

var select_sp = false;
var select_ep = false;

var connect_curve = false;
var connect_1_selected = false;
var connect_2_selected = false;
var connect_1_x;
var connect_1_y;
var connect_2_x;
var connect_2_y;
var shape_connected = false;


var add_edge = false;

var shape_array = new Array();

var create_shape = false;

var manipulate_shape = true;

function createHeartShape(shape_array) {
	var x = 0, y = 0; f = 1/10;

	scene.remove(scene.children[0]);

	var newShape = new THREE.Shape();

	//newShape.moveTo(shape_array[0].sp_x, shape_array[0].sp_x)
	for (var i=0;i<shape_array.length;i++){
		if (i ==0){
          newShape.moveTo(shape_array[i].sp_x, shape_array[i].sp_y);
        }
		newShape.bezierCurveTo(shape_array[i].cp1_x, shape_array[i].cp1_y, shape_array[i].cp2_x, shape_array[i].cp2_y, shape_array[i].ep_x,shape_array[i].ep_y);
	}


	var extrudeSettings = {
		steps: 2,
		amount: depth,
		bevelEnabled: true,
		bevelThickness: 2,
		bevelSize: 2,
		bevelSegments: 6
	};


	

	var geometry = new THREE.ExtrudeGeometry( newShape, extrudeSettings );
	if (wire_frame == true) {
		var material = new THREE.MeshBasicMaterial( { color: 0x00ff00, wireframe: true } );
	} else {

		var materialFront = new THREE.MeshLambertMaterial({
	    color: 0xffff00,
	    ambient: 0xffff00
		});

		var materialSide = new THREE.MeshLambertMaterial({
		    color: 0xff8800,
		    ambient: 0xff8800
		});

		var materials = [ materialFront, materialSide ];
		var material = new THREE.MeshFaceMaterial( materials );
	}
	
	mesh = new THREE.Mesh( geometry, material ) ;
	scene.add( mesh );
}

// createHeartShape();

// controls
controls = new THREE.OrbitControls(camera);

// light
scene.add(new THREE.AmbientLight(0x222222));

// light
light = new THREE.PointLight(0xaaaaaa);
camera.add(light);

camera.position.z = 350; 

var render = function () {
	requestAnimationFrame( render );

	if (mesh != undefined) {
		//mesh.rotation.y += 0.01;	
	}

				// cube.position.x += 0.001;
	// cube.position.y += 0.001;

	renderer.render(scene, camera);
};

render();


function relMouseCoords(event){
    var totalOffsetX = 0;
    var totalOffsetY = 0;
    var canvasX = 0;
    var canvasY = 0;
    var currentElement = this;

    do{
        totalOffsetX += currentElement.offsetLeft - currentElement.scrollLeft;
        totalOffsetY += currentElement.offsetTop - currentElement.scrollTop;
    }
    while(currentElement = currentElement.offsetParent)

    canvasX = event.pageX - totalOffsetX;
    canvasY = event.pageY - totalOffsetY;

    return {x:canvasX, y:canvasY}
}
HTMLCanvasElement.prototype.relMouseCoords = relMouseCoords;



function HandleInfo(point_type, cur_index){
  this.point_type = point_type
  this.cur_index = cur_index;
}

function Handle(type, x, y) {
    this.type = type;
    this.x = x;
    this.y = y;
    this.initialize = function() {
      // draw handles for controll points
      ctx.beginPath();
      ctx.fill();
      ctx.arc(this.x,this.y,5,0,2*Math.PI);
      if (this.type == 'control') {
     		ctx.fillStyle = "red";
      } else if (this.type == "start"){
        ctx.fillStyle = "green";
      }
      else{
        ctx.fillStyle = "blue";
      }
      ctx.fill();
   		ctx.stroke();    	
    }
}


function BezierCurve(cp1_x, cp1_y, cp2_x, cp2_y, sp_x, sp_y, ep_x, ep_y){
  this.cp1_x = cp1_x;
  this.cp1_y = cp1_y;
  this.cp2_x = cp2_x;
  this.cp2_y = cp2_y;
  this.sp_x = sp_x;
  this.sp_y = sp_y;
  this.ep_x = ep_x;
  this.ep_y = ep_y;
  this.cp1_handle;
  this.cp2_handle;
  this.ep1_handle;
  this.ep2_handle;
  this.initialize = function(){

      // draw bezier curve
      ctx.moveTo(this.sp_x, this.sp_y);
      ctx.bezierCurveTo(this.cp1_x, this.cp1_y, this.cp2_x, this.cp2_y, this.ep_x, this.ep_y);
      ctx.stroke();

      // draw handles for control points
      var control_handle1 = new Handle('control',this.cp1_x,this.cp1_y);
      var control_handle2 = new Handle('control',this.cp2_x,this.cp2_y);
      var end_handle1 = new Handle('start',this.sp_x,this.sp_y);
      var end_handle2 = new Handle('end',this.ep_x,this.ep_y); 
      control_handle1.initialize();
      control_handle2.initialize();
      end_handle1.initialize();
      end_handle2.initialize();
      this.cp1_handle = control_handle1;
      this.cp2_handle = control_handle2;
      this.ep1_handle = end_handle1;
      this.ep2_handle = end_handle2;
  }
}

// draws the entire drawing depending on the data structure for clicks and their positions and if draggin was turned on
function redraw(doPaint){
  if (doPaint){

    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height); // Clears the canvas

    if (manipulate_shape == true){
      for(var i=0; i < b_curves.length; i++) { 
        b_curves[i].initialize();
      } 
    }

    

    if (create_shape == true) {
      for (var i=0; i<shape_array.length; i++){
        if (i ==0){
          ctx.moveTo(shape_array[i].sp_x, shape_array[i].sp_y);
        }
        ctx.bezierCurveTo(shape_array[i].cp1_x, shape_array[i].cp1_y, shape_array[i].cp2_x, shape_array[i].cp2_y, shape_array[i].ep_x, shape_array[i].ep_y);
      }
      ctx.stroke();
    }



   


  }

}

function handleSelected(handle_pos_x,handle_pos_y,click_pos_x, click_pos_y){
  //console.log("handle " + handle);
  // console.log("lower bound x: " + (handle_pos_x) - 10);
  // console.log("uppper bound x: " + handle_pos_x + 10);
  // console.log("lower bound y: " + handle_pos_y - 10);
  // console.log("upper bound y: " + handle_pos_y + 10);
  // console.log("click pos x: " + click_pos_x);
  // console.log("click pos y: " + click_pos_y);
  if ((handle_pos_x - 10) < (click_pos_x) && (handle_pos_x + 10) > (click_pos_x)){
    if ((handle_pos_y - 10) < (click_pos_y) && (handle_pos_y + 10) > (click_pos_y)){
      return true;
    } else {
      return false
    }
  } else {
    return false;
  }
}

function connectCurve(pointMoveFrom_x, pointMoveFrom_y, pointMoveTo_x, pointMoveTo_y){
  console.log("con curve")
  var handle_info_from = returnBezCurveIndex(pointMoveFrom_x, pointMoveFrom_y);
  var handle_info_to = returnBezCurveIndex(pointMoveTo_x, pointMoveTo_y);
  if ((handle_info_from.point_type == 'sp') && (handle_info_to.point_type == 'ep')){
    b_curves[handle_info_from.cur_index].sp_x = b_curves[handle_info_to.cur_index].ep_x
    b_curves[handle_info_from.cur_index].sp_y = b_curves[handle_info_to.cur_index].ep_y
  } else if ((handle_info_from.point_type == 'sp') && (handle_info_to.point_type == 'sp')){
    b_curves[handle_info_from.cur_index].sp_x =  b_curves[handle_info_to.cur_index].sp_x
    b_curves[handle_info_from.cur_index].sp_y =  b_curves[handle_info_to.cur_index].sp_y 
  } else if ((handle_info_from.point_type == 'ep') && (handle_info_to.point_type == 'ep')){
    b_curves[handle_info_from.cur_index].ep_x =  b_curves[handle_info_to.cur_index].ep_x
    b_curves[handle_info_from.cur_index].ep_y =  b_curves[handle_info_to.cur_index].ep_y 
  } else if ((handle_info_from.point_type == 'ep') && (handle_info_to.point_type == 'sp')){
    b_curves[handle_info_from.cur_index].ep_x =  b_curves[handle_info_to.cur_index].sp_x
    b_curves[handle_info_from.cur_index].ep_y =  b_curves[handle_info_to.cur_index].sp_y 
  }
  else {
    alert("choose a valid handle");
  }
  redraw(true);

}

function checkAllHandles(posX, posY){
  for (var i=0;i<b_curves.length;i++){
      cp1_hand = b_curves[i].cp1_handle;
      cp2_hand = b_curves[i].cp2_handle;
      ep1_hand = b_curves[i].ep1_handle;
      ep2_hand = b_curves[i].ep2_handle;
      if (handleSelected(cp1_hand.x, cp1_hand.y, posX, posY) == true){
        cp1_hand.x = posX;
        cp1_hand.y = posY;
        b_curves[i].cp1_x = posX;
        b_curves[i].cp1_y = posY;
        console.log("yooo cp1")
        break;
      } else if (handleSelected(cp2_hand.x, cp2_hand.y, posX, posY) == true){
        cp2_hand.x = posX;
        cp2_hand.y = posY;
        b_curves[i].cp2_x = posX;
        b_curves[i].cp2_y = posY;
        console.log("yooo cp2")
        break;
      } else if (handleSelected(ep1_hand.x, ep1_hand.y, posX, posY) == true){
        ep1_hand.x = posX;
        ep1_hand.y = posY;
        b_curves[i].sp_x = posX;
        b_curves[i].sp_y = posY;
        console.log("yooo ep1")
        break;
      } else if (handleSelected(ep2_hand.x, ep2_hand.y, posX, posY) == true) {
        ep2_hand.x = posX;
        ep2_hand.y = posY;
        b_curves[i].ep_x = posX;
        b_curves[i].ep_y = posY;
        console.log("yooo ep2")
        break;
      }
  }
}

function returnBezCurveIndex(posX, posY){
  var curveinfo;
  for (var i=0;i<b_curves.length;i++){
      cp1_hand = b_curves[i].cp1_handle;
      cp2_hand = b_curves[i].cp2_handle;
      ep1_hand = b_curves[i].ep1_handle;
      ep2_hand = b_curves[i].ep2_handle;
      if (handleSelected(cp1_hand.x, cp1_hand.y, posX, posY) == true){
        curveinfo = new HandleInfo("cp1",i);
        return curveinfo;
      } else if (handleSelected(cp2_hand.x, cp2_hand.y, posX, posY) == true){
         curveinfo = new HandleInfo("cp2",i);
         return curveinfo;

      } else if (handleSelected(ep1_hand.x, ep1_hand.y, posX, posY) == true){
         curveinfo = new HandleInfo("sp",i);
         return curveinfo;

      } else if (handleSelected(ep2_hand.x, ep2_hand.y, posX, posY) == true) {
         curveinfo = new HandleInfo("ep",i);
         return curveinfo;
      } 
  }
  curveinfo = new HandleInfo("error",-1);
  return curveinfo;
}



function makeShape(){
  shape_array = [];	
  first = b_curves[0];
  shape_array.push(first);
  for (var i=1;i<b_curves.length;i++){
    var next_c_ind = getConnectedCurve(first.ep_x, first.ep_y);
    console.log(next_c_ind);
    if (next_c_ind < 0){
      alert("shape not connected 1");
      shape_connected = false;
      return
    } else{
      shape_array.push(b_curves[next_c_ind]);
      first = b_curves[next_c_ind]
    }
  }
  if (!(shape_array[0].sp_x == shape_array[shape_array.length-1].ep_x) && (shape_array[0].sp_y == shape_array[shape_array.length-1].ep_y)) {
    alert("shape not connected 2");
    shape_connected = false;
    return
  }
  shape_connected = true;

}

function getConnectedCurve(end_point_x, end_point_y){
  for (var i=0; i<b_curves.length;i++){
    console.log("b_curves[i].sp_x = " + b_curves[i].sp_x )
    console.log("b_curves[i].sp_y = " + b_curves[i].sp_y )
    console.log("end_point_x = " + end_point_x );
    console.log("end_point_y = " + end_point_y );
    if ((b_curves[i].sp_x == end_point_x) && (b_curves[i].sp_y == end_point_y)){
      return i;
    }
  }

  return -1;
}

function changeIconColour(element, switch_on){
	if (switch_on == true) {
		$(element).css("color", "red");
	} else {
		$(element).css("color", "black");
	}
	
}


function saveSTL( scene, name ){  
  var exporter = new THREE.STLExporter();
  var stlString = exporter.parse( scene );
  
  var blob = new Blob([stlString], {type: 'text/plain'});
  
  saveAs(blob, name + '.stl');
}

function saveBCurves(){
	var b_cs = new Array()
	if (b_curves.length == 0){
		var bc_to_json = {cp1_x: -1, cp1_y: -1, cp2_x: -1, cp2_y: -1, sp_x: -1, sp_y: -1, ep_x: -1,  ep_y: -1, draw_id: <%=@drawing.id%>}
		b_cs.push(bc_to_json);
	} else {
		for (var i=0;i<b_curves.length;i++){
			var bc_to_json = {cp1_x: b_curves[i].cp1_x, cp1_y: b_curves[i].cp1_y, cp2_x: b_curves[i].cp2_x, cp2_y: b_curves[i].cp2_y, sp_x: b_curves[i].sp_x, sp_y: b_curves[i].sp_y, ep_x: b_curves[i].ep_x,  ep_y: b_curves[i].ep_y, draw_id: <%=@drawing.id%>}
			b_cs.push(bc_to_json);
		}

	}
	
	$.ajax({
	  type: "POST",
	  data: {curves:b_cs},
	  url: "/save_curves",
	  success: function(msg){
	    console.log("successfully saved");
	  }
	});
}





$('#canvas').mouseup(function (e){
  mousedown = false;
});

$('#canvas').mousedown(function(e){
    mousedown = true;
    coords = canvas.relMouseCoords(e);
	curr_posX = coords.x;
	curr_posY = coords.y;
    // curr_posX = e.pageX - this.offsetLeft;
    // curr_posY = e.pageY - this.offsetTop;
    console.log("curr_posX "+curr_posX);
    console.log("curr_posY "+curr_posY);

    if (connect_curve == true && connect_1_selected == false && connect_2_selected == false) {
      console.log("con_curve = true")
      var hand_from = returnBezCurveIndex(curr_posX, curr_posY)
      if (hand_from.point_type == 'ep' || hand_from.point_type == 'sp'){
        connect_1_x = curr_posX;
        connect_1_y = curr_posY;
        connect_1_selected = true;
      }
    }

    else if (connect_curve == true && connect_1_selected == true && connect_2_selected == false){
      console.log("con_1_sel = true")
      var hand_to = returnBezCurveIndex(curr_posX, curr_posY)
      if (hand_to.point_type == 'ep' || hand_to.point_type == 'sp'){
        connect_2_x = curr_posX;
        connect_2_y = curr_posY;
        connect_2_selected = true;
      }
    }

    else if (connect_curve == true && connect_1_selected == true && connect_2_selected == true) {
      console.log("con_2_sel = true")
      connectCurve(connect_1_x, connect_1_y, connect_2_x, connect_2_y);
      connect_1_selected = false;
      connect_2_selected = false;
    }


    
});

$('#canvas').mousemove(function(e) {
  if (mousedown == true){
  	coords = canvas.relMouseCoords(e);
	curr_posX = coords.x;
	curr_posY = coords.y;
    // curr_posX = e.pageX - this.offsetLeft;
    // curr_posY = e.pageY - this.offsetTop;
    checkAllHandles(curr_posX, curr_posY);

    redraw(true);
  }
})
$('.create-b-curve').click(function() {
  var create_curve = new BezierCurve(20, 100, 200, 100, 20, 20, 200, 20);
  create_curve.initialize();
  b_curves.push(create_curve);
})

$('.con-b-curve').click(function() { 
  if (connect_curve == false){
    connect_curve = true;
  } else{
    connect_curve = false;
  }
  changeIconColour(this,connect_curve);
});

$('.create-shape').click(function() { 
  if (create_shape == false){
    create_shape = true;
  } else{
    create_shape = false;
  }
});

$('.add-edge').click(function() { 
  if (add_edge == false && create_shape ==false){
    alert("select create shape first then select add edge")
  } else if (add_edge == false && create_shape == true) {
    add_edge = true
  }
  else if (add_edge == true && create_shape == true){
    add_edge = false;
  }
});

$('.create-shape').click(function() { 
  if (create_shape == false && manipulate_shape == true){
    create_shape = true;
    manipulate_shape = false;

    makeShape();
    if (shape_connected){
    	createHeartShape(shape_array);
    }
    
    redraw(true);
  } 
  changeIconColour(this,create_shape);
});

$('.manipulate-shape').click(function() { 
  if (create_shape == true && manipulate_shape == false){
    create_shape = false;
    manipulate_shape = true;
    redraw(true);
  } 
  changeIconColour(this,manipulate_shape);
});

$('.clear-screen').click(function() { 
	b_curves = [];
	shape_array = [];
   ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height); // Clears the canvas
   create_shape = false;

	manipulate_shape = true;
});

$('.download-stl').click(function () {
	saveSTL(scene, "test_stl");
});

$('.save-curves').click(function () {
	saveBCurves();
});

$('.depth-down').click(function () {
	depth = depth - 5;
	if (depth<10){
		alert("can't go below ten");
		depth++
	}
	createHeartShape(shape_array);
});

$('.depth-up').click(function () {
	depth = depth + 5;
	createHeartShape(shape_array);
});




$(document).ready(function() {
	<% @b_curves.each do |b| %> 
		var create_curve = new BezierCurve(<%=b.cp1_x%>, <%=b.cp1_y%>, <%=b.cp2_x%>, <%=b.cp2_y%>, <%=b.sp_x%>, <%=b.sp_y%>, <%=b.ep_x%>, <%=b.ep_y%>);
		b_curves.push(create_curve);
	<% end %> 
	redraw(true);

})




</script> 
